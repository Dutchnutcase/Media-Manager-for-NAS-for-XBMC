<?php if ( ! defined('BASEPATH')) exit('No direct script access allowed');

class Wizard
{
  private $_CI;

  public function __construct()
  {
    // Instance de CodeIgniter pour accéder à sa configuration
    $this->_CI =& get_instance();

    log_message('debug', "Wizard Class Initialized");
  }

	public function make_config($language)
	{
		$base_url = $_SERVER['HTTP_REFERER'];
		$this->_CI->config->set_item('base_url', $base_url);
		$encryption_key = md5 (uniqid (rand()));

		log_message('debug', "Wizard Step 1 - writing config.php");
		log_message('debug', "Wizard Step 1 - base_url is '$base_url'");

		$config_file = <<< EOF
<?php  if ( ! defined('BASEPATH')) exit('No direct script access allowed');

/*
|--------------------------------------------------------------------------
| Base Site URL
|--------------------------------------------------------------------------
|
| URL to your CodeIgniter root. Typically this will be your base URL,
| WITH a trailing slash:
|
| http://example.com/
|
| If this is not set then CodeIgniter will guess the protocol, domain and
| path to your installation.
|
*/
_config['base_url'] = "$base_url";

/*
|--------------------------------------------------------------------------
| Index File
|--------------------------------------------------------------------------
|
| Typically this will be your index.php file, unless you've renamed it to
| something else. If you are using mod_rewrite to remove the page set this
| variable so that it is blank.
|
*/
_config['index_page'] = "";

/*
|--------------------------------------------------------------------------
| URI PROTOCOL
|--------------------------------------------------------------------------
|
| This item determines which server global should be used to retrieve the
| URI string.  The default setting of 'AUTO' works for most servers.
| If your links do not seem to work, try one of the other delicious flavors:
|
| 'AUTO'      Default - auto detects
| 'PATH_INFO'   Uses the PATH_INFO
| 'QUERY_STRING'  Uses the QUERY_STRING
| 'REQUEST_URI'   Uses the REQUEST_URI
| 'ORIG_PATH_INFO'  Uses the ORIG_PATH_INFO
|
*/
_config['uri_protocol'] = 'AUTO';

/*
|--------------------------------------------------------------------------
| URL suffix
|--------------------------------------------------------------------------
|
| This option allows you to add a suffix to all URLs generated by CodeIgniter.
| For more information please see the user guide:
|
| http://codeigniter.com/user_guide/general/urls.html
*/

_config['url_suffix'] = '';

/*
|--------------------------------------------------------------------------
| Default Language
|--------------------------------------------------------------------------
|
| This determines which set of language files should be used. Make sure
| there is an available translation if you intend to use something other
| than english.
|
*/
_config['language'] = '$language';

/*
|--------------------------------------------------------------------------
| Default Character Set
|--------------------------------------------------------------------------
|
| This determines which character set is used by default in various methods
| that require a character set to be provided.
|
*/
_config['charset'] = 'UTF-8';

/*
|--------------------------------------------------------------------------
| Enable/Disable System Hooks
|--------------------------------------------------------------------------
|
| If you would like to use the 'hooks' feature you must enable it by
| setting this variable to TRUE (boolean).  See the user guide for details.
|
*/
_config['enable_hooks'] = FALSE;


/*
|--------------------------------------------------------------------------
| Class Extension Prefix
|--------------------------------------------------------------------------
|
| This item allows you to set the filename/classname prefix when extending
| native libraries.  For more information please see the user guide:
|
| http://codeigniter.com/user_guide/general/core_classes.html
| http://codeigniter.com/user_guide/general/creating_libraries.html
|
*/
_config['subclass_prefix'] = 'MY_';


/*
|--------------------------------------------------------------------------
| Allowed URL Characters
|--------------------------------------------------------------------------
|
| This lets you specify with a regular expression which characters are permitted
| within your URLs.  When someone tries to submit a URL with disallowed
| characters they will get a warning message.
|
| As a security measure you are STRONGLY encouraged to restrict URLs to
| as few characters as possible.  By default only these are allowed: a-z 0-9~%.:_-
|
| Leave blank to allow all characters -- but only if you are insane.
|
| DO NOT CHANGE THIS UNLESS YOU FULLY UNDERSTAND THE REPERCUSSIONS!!
|
*/
_config['permitted_uri_chars'] = 'a-z 0-9~%.:_\-';


/*
|--------------------------------------------------------------------------
| Enable Query Strings
|--------------------------------------------------------------------------
|
| By default CodeIgniter uses search-engine friendly segment based URLs:
| example.com/who/what/where/
|
| By default CodeIgniter enables access to the __GET array.  If for some
| reason you would like to disable it, set 'allow_get_array' to FALSE.
|
| You can optionally enable standard query string based URLs:
| example.com?who=me&what=something&where=here
|
| Options are: TRUE or FALSE (boolean)
|
| The other items let you set the query string 'words' that will
| invoke your controllers and its functions:
| example.com/index.php?c=controller&m=function
|
| Please note that some of the helpers won't work as expected when
| this feature is enabled, since CodeIgniter is designed primarily to
| use segment based URLs.
|
*/
_config['allow_get_array']    = TRUE;
_config['enable_query_strings'] = FALSE;
_config['controller_trigger'] = 'c';
_config['function_trigger']   = 'm';
_config['directory_trigger']  = 'd'; // experimental not currently in use

/*
|--------------------------------------------------------------------------
| Error Logging Threshold
|--------------------------------------------------------------------------
|
| If you have enabled error logging, you can set an error threshold to
| determine what gets logged. Threshold options are:
| You can enable error logging by setting a threshold over zero. The
| threshold determines what gets logged. Threshold options are:
|
| 0 = Disables logging, Error logging TURNED OFF
| 1 = Error Messages (including PHP errors)
| 2 = Debug Messages
| 3 = Informational Messages
| 4 = All Messages
|
| For a live site you'll usually only enable Errors (1) to be logged otherwise
| your log files will fill up very fast.
|
*/
_config['log_threshold'] = 4;

/*
|--------------------------------------------------------------------------
| Error Logging Directory Path
|--------------------------------------------------------------------------
|
| Leave this BLANK unless you would like to set something other than the default
| application/logs/ folder. Use a full server path with trailing slash.
|
*/
_config['log_path'] = '';

/*
|--------------------------------------------------------------------------
| Date Format for Logs
|--------------------------------------------------------------------------
|
| Each item that is logged has an associated date. You can use PHP date
| codes to set your own date formatting
|
*/
_config['log_date_format'] = 'Y-m-d H:i:s';

/*
|--------------------------------------------------------------------------
| Cache Directory Path
|--------------------------------------------------------------------------
|
| Leave this BLANK unless you would like to set something other than the default
| system/cache/ folder.  Use a full server path with trailing slash.
|
*/
_config['cache_path'] = '';

/*
|--------------------------------------------------------------------------
| Encryption Key
|--------------------------------------------------------------------------
|
| If you use the Encryption class or the Session class you
| MUST set an encryption key.  See the user guide for info.
|
*/
_config['encryption_key'] = '$encryption_key';

/*
|--------------------------------------------------------------------------
| Session Variables
|--------------------------------------------------------------------------
|
| 'sess_cookie_name'    = the name you want for the cookie
| 'sess_expiration'     = the number of SECONDS you want the session to last.
|   by default sessions last 7200 seconds (two hours).  Set to zero for no expiration.
| 'sess_expire_on_close'  = Whether to cause the session to expire automatically
|   when the browser window is closed
| 'sess_encrypt_cookie'   = Whether to encrypt the cookie
| 'sess_use_database'   = Whether to save the session data to a database
| 'sess_table_name'     = The name of the session database table
| 'sess_match_ip'     = Whether to match the user's IP address when reading the session data
| 'sess_match_useragent'  = Whether to match the User Agent when reading the session data
| 'sess_time_to_update'   = how many seconds between CI refreshing Session Information
|
*/
_config['sess_cookie_name']   = 'session';
_config['sess_expiration']    = 14400;
_config['sess_expire_on_close'] = FALSE;
_config['sess_encrypt_cookie']  = FALSE;
_config['sess_use_database']  = FALSE;
_config['sess_table_name']    = 'sessions';
_config['sess_match_ip']    = FALSE;
_config['sess_match_useragent'] = TRUE;
_config['sess_time_to_update']  = 300;

/*
|--------------------------------------------------------------------------
| Cookie Related Variables
|--------------------------------------------------------------------------
|
| 'cookie_prefix' = Set a prefix if you need to avoid collisions
| 'cookie_domain' = Set to .your-domain.com for site-wide cookies
| 'cookie_path'   =  Typically will be a forward slash
| 'cookie_secure' =  Cookies will only be set if a secure HTTPS connection exists.
|
*/
_config['cookie_prefix']  = "";
_config['cookie_domain']  = "";
_config['cookie_path']    = "/";
_config['cookie_secure']  = FALSE;

/*
|--------------------------------------------------------------------------
| Global XSS Filtering
|--------------------------------------------------------------------------
|
| Determines whether the XSS filter is always active when GET, POST or
| COOKIE data is encountered
|
*/
_config['global_xss_filtering'] = FALSE;

/*
|--------------------------------------------------------------------------
| Cross Site Request Forgery
|--------------------------------------------------------------------------
| Enables a CSRF cookie token to be set. When set to TRUE, token will be
| checked on a submitted form. If you are accepting user data, it is strongly
| recommended CSRF protection be enabled.
|
| 'csrf_token_name' = The token name
| 'csrf_cookie_name' = The cookie name
| 'csrf_expire' = The number in seconds the token should expire.
*/
_config['csrf_protection'] = FALSE;
_config['csrf_token_name'] = 'csrf_test_name';
_config['csrf_cookie_name'] = 'csrf_cookie_name';
_config['csrf_expire'] = 7200;

/*
|--------------------------------------------------------------------------
| Output Compression
|--------------------------------------------------------------------------
|
| Enables Gzip output compression for faster page loads.  When enabled,
| the output class will test whether your server supports Gzip.
| Even if it does, however, not all browsers support compression
| so enable only if you are reasonably sure your visitors can handle it.
|
| VERY IMPORTANT:  If you are getting a blank page when compression is enabled it
| means you are prematurely outputting something to your browser. It could
| even be a line of whitespace at the end of one of your scripts.  For
| compression to work, nothing can be sent before the output buffer is called
| by the output class.  Do not 'echo' any values with compression enabled.
|
*/
_config['compress_output'] = FALSE;

/*
|--------------------------------------------------------------------------
| Master Time Reference
|--------------------------------------------------------------------------
|
| Options are 'local' or 'gmt'.  This pref tells the system whether to use
| your server's local time as the master 'now' reference, or convert it to
| GMT.  See the 'date helper' page of the user guide for information
| regarding date handling.
|
*/
_config['time_reference'] = 'local';


/*
|--------------------------------------------------------------------------
| Rewrite PHP Short Tags
|--------------------------------------------------------------------------
|
| If your PHP installation does not have short tag support enabled CI
| can rewrite the tags on-the-fly, enabling you to utilize that syntax
| in your view files.  Options are TRUE or FALSE (boolean)
|
*/
_config['rewrite_short_tags'] = FALSE;


/*
|--------------------------------------------------------------------------
| Reverse Proxy IPs
|--------------------------------------------------------------------------
|
| If your server is behind a reverse proxy, you must whitelist the proxy IP
| addresses from which CodeIgniter should trust the HTTP_X_FORWARDED_FOR
| header in order to properly identify the visitor's IP address.
| Comma-delimited, e.g. '10.0.1.200,10.0.1.201'
|
*/
_config['proxy_ips'] = '';


/* End of file config.php */
/* Location: ./application/config/config.php */
EOF;

		$config_file = str_replace('_config[', '$config[', $config_file);
		$config_file = str_replace('_GET', '$_GET', $config_file);

		$filename = APPPATH.'/config/config.php';

		$handle = fopen($filename, 'w');
		fwrite($handle, $config_file);
		fclose($handle);
	}

	public function make_database()
	{
    // Pas de limite de temps pour le script
    set_time_limit(0);

		if (isset($_FILES['advancedsettings']))
		{
			if (is_uploaded_file($_FILES['advancedsettings']['tmp_name']))
			{
				log_message('debug', "Wizard Step 2 - 'advancedsettings.xml' file correctly uploaded");

				$xml = simplexml_load_file($_FILES['advancedsettings']['tmp_name']);

				// Gestion de la base de données
				if (isset($xml->videodatabase) || isset($xml->musicdatabase))
				{
					// En espérant qu'il n'y ait qu"une seul serveur, port, utilisateur et mot de passe
					$data = new stdClass();

					// Adresse IP remplacée par localhost si celle fourni est identique à celle du serveur
					$data->hostname = ($_SERVER['SERVER_ADDR'] != $xml->videodatabase->host) ? (string) $xml->videodatabase->host : 'localhost';
					$data->port = (string) $xml->videodatabase->port;
					$data->username = (string) $xml->videodatabase->user;
					$data->password = (string) $xml->videodatabase->pass;

					// Nom de la base de données 'video' fourni ?
					if (isset($xml->videodatabase->name))
					{
						$data->video = (string) $xml->videodatabase->name;
					}
					else
					{
						$data->video = 'MyVideos58';
					}

					// Nom de la base de données 'music' fourni ?
					if (isset($xml->musicdatabase->name))
					{
						$data->music = (string) $xml->musicdatabase->name;
					}
					else
					{
						$data->music = 'MyMusic18';
					}

				log_message('debug', "Wizard Step 2 - database hostname : ".$data->hostname);
				log_message('debug', "Wizard Step 2 - if the host is the server, database hostname : localhost");
				log_message('debug', "Wizard Step 2 - database port : ".$data->port);
				log_message('debug', "Wizard Step 2 - database username : hidden");
				log_message('debug', "Wizard Step 2 - database password : hidden");
				log_message('debug', "Wizard Step 2 - database video : ".$data->video);
				log_message('debug', "Wizard Step 2 - database music : ".$data->music);

				$database_file = <<< EOF
<?php  if ( ! defined('BASEPATH')) exit('No direct script access allowed');
/*
| -------------------------------------------------------------------
| DATABASE CONNECTIVITY SETTINGS
| -------------------------------------------------------------------
| This file will contain the settings needed to access your database.
|
| For complete instructions please consult the 'Database Connection'
| page of the User Guide.
|
| -------------------------------------------------------------------
| EXPLANATION OF VARIABLES
| -------------------------------------------------------------------
|
| ['hostname'] The hostname of your database server.
| ['username'] The username used to connect to the database
| ['password'] The password used to connect to the database
| ['database'] The name of the database you want to connect to
| ['dbdriver'] The database type. ie: mysql.  Currently supported:
         mysql, mysqli, postgre, odbc, mssql, sqlite, oci8
| ['dbprefix'] You can add an optional prefix, which will be added
|        to the table name when using the  Active Record class
| ['pconnect'] TRUE/FALSE - Whether to use a persistent connection
| ['db_debug'] TRUE/FALSE - Whether database errors should be displayed.
| ['cache_on'] TRUE/FALSE - Enables/disables query caching
| ['cachedir'] The path to the folder where cache files should be stored
| ['char_set'] The character set used in communicating with the database
| ['dbcollat'] The character collation used in communicating with the database
| ['swap_pre'] A default table prefix that should be swapped with the dbprefix
| ['autoinit'] Whether or not to automatically initialize the database.
| ['stricton'] TRUE/FALSE - forces 'Strict Mode' connections
|             - good for ensuring strict SQL while developing
|
| The _active_group variable lets you choose which connection group to
| make active.  By default there is only one group (the 'default' group).
|
| The _active_record variables lets you determine whether or not to load
| the active record class
*/

// Hôte, utilisateur mysql
_db['video']['hostname'] = "{$data->hostname}";
_db['video']['username'] = "{$data->username}";
_db['video']['password'] = "{$data->password}";

// Noms des bases de données pour les vidéos, la musique et l'inteface
_db['music']['database'] = "{$data->music}";
_db['video']['database'] = "{$data->video}";
_db['xbmc']['database'] = "MyXbmc";

// Données complémentaires à ne pas modifier normalement
_db['video']['dbdriver'] = "mysql";
_db['video']['dbprefix'] = "";
_db['video']['pconnect'] = FALSE;
_db['video']['db_debug'] = TRUE;
_db['video']['cache_on'] = FALSE;
_db['video']['cachedir'] = "";
_db['video']['char_set'] = "utf8";
_db['video']['dbcollat'] = "utf8_general_ci";
_db['video']['port'] = {$data->port};

// Reprise de données complémentaires en commun avec l'autre base de données
_db['music']['hostname'] = _db['video']['hostname'];
_db['music']['username'] = _db['video']['username'];
_db['music']['password'] = _db['video']['password'];
_db['music']['dbdriver'] = _db['video']['dbdriver'];
_db['music']['dbprefix'] = _db['video']['dbprefix'];
_db['music']['pconnect'] = _db['video']['pconnect'];
_db['music']['db_debug'] = _db['video']['db_debug'];
_db['music']['cache_on'] = _db['video']['cache_on'];
_db['music']['cachedir'] = _db['video']['cachedir'];
_db['music']['char_set'] = _db['video']['char_set'];
_db['music']['dbcollat'] = _db['video']['dbcollat'];
_db['music']['port'] = _db['video']['port'];

_db['xbmc']['hostname'] = _db['video']['hostname'];
_db['xbmc']['username'] = _db['video']['username'];
_db['xbmc']['password'] = _db['video']['password'];
_db['xbmc']['dbdriver'] = _db['video']['dbdriver'];
_db['xbmc']['dbprefix'] = _db['video']['dbprefix'];
_db['xbmc']['pconnect'] = _db['video']['pconnect'];
_db['xbmc']['db_debug'] = _db['video']['db_debug'];
_db['xbmc']['cache_on'] = _db['video']['cache_on'];
_db['xbmc']['cachedir'] = _db['video']['cachedir'];
_db['xbmc']['char_set'] = _db['video']['char_set'];
_db['xbmc']['dbcollat'] = _db['video']['dbcollat'];
_db['xbmc']['port'] = _db['video']['port'];

// Base de données principale
_active_group = "xbmc";
_active_record = TRUE;

/* End of file database.php */
/* Location: ./application/config/database.php */
EOF;

					$database_file = str_replace('_db[', '$db[', $database_file);
					$database_file = str_replace('_active_group', '$active_group', $database_file);
					$database_file = str_replace('_active_record', '$active_record', $database_file);

					$filename = APPPATH.'/config/database.php';

					$handle = fopen($filename, 'w');
					fwrite($handle, $database_file);
					fclose($handle);
				}
				return TRUE;
			}
		}
		else
					return FALSE;
  }

	public function make_sources()
	{
    // Pas de limite de temps pour le script
    set_time_limit(0);

		if (isset($_FILES['sources']))
		{
			if (is_uploaded_file($_FILES['sources']['tmp_name']))
			{
				$xml = simplexml_load_file($_FILES['sources']['tmp_name']);

				$this->_CI->load->model('xbmc/sources_model');

				// Gestion de la base de données
				if (isset($xml->video))
				{
					// Chargement d'un modèle de la base de données 'video'
					$this->_CI->load->model('video/video_paths_model');

					foreach($xml->video->source as $source)
					{
						$id = $this->_CI->video_paths_model->search((string) $source->path);

						// La source a été trouvée ?
						if ($id != 0)
						{
							log_message('debug', "Wizard Step 3 - video source '".(string) $source->path."' found added to 'sources' table");

							$path = $this->_CI->video_paths_model->get($id);

							// Conversion des noms des scrapers en noms de classe
							$path->strScraper = str_replace('metadata.', '', $path->strScraper);
							$path->strScraper = str_replace('.', '_', $path->strScraper);

							// Présence de paramètres ?
							if ($path->strSettings != '')
							{
								$xml_settings = simplexml_load_string($path->strSettings);

								$settings = new stdClass();

								foreach($xml_settings as $node)
								{
									$id = $node->attributes()->id;
									$v = (string) $node->attributes()->value;

									// Besoin de transformer des chaînes en booléens ?
									if (($v == 'true') || ($v == 'false'))
									{
										if ($v == 'true') $value = TRUE;
										if ($v == 'false') $value = FALSE;
									}
									else
											$value = $v;

									$settings->$id = $value;
								}
								$settings->user_folder_name = ($path->useFolderNames == 1) ? TRUE : FALSE;
								$path->strSettings = serialize($settings);
							}

							$data = array('idPath' => $path->idPath,
														'client_path' => (string) $source->path,
														'media_db' => 'video',
														'content' => $path->strContent,
														'scraper' => $path->strScraper,
														'settings' => $path->strSettings
														);

							$this->_CI->sources_model->add($data);
						}
						else
								log_message('debug', "Wizard Step 3 - video source '".(string) $source->path."' not found not added to 'sources' table");

					}
				}

				if (isset($xml->music))
				{
					// Chargement d'un modèle de la base de données 'music'
					$this->_CI->load->model('music/music_paths_model');

					foreach($xml->music->source as $source)
					{
						$id = $this->_CI->music_paths_model->search((string) $source->path);

						// La source a été trouvée ?
						if ($id != 0)
						{
							log_message('debug', "Wizard Step 3 - music source '".(string) $source->path."' found added to 'sources' table");

							$data = array('idPath' => $id,
														'client_path' => (string) $source->path,
														'media_db' => 'music',
														'content' => '',
														'scraper' => '',
														'settings' => ''
														);

							$this->_CI->sources_model->add($data);
						}
						else
								log_message('debug', "Wizard Step 3 - music source '".(string) $source->path."' not found not added to 'sources' table");
					}
				}
				return TRUE;
			}
		}
		else
					return FALSE;
  }

	function make_routes()
	{
		log_message('debug', "Wizard Step 4 - writing routes.php");
		$routes_file = <<< EOF
<?php  if ( ! defined('BASEPATH')) exit('No direct script access allowed');
/*
| -------------------------------------------------------------------------
| URI ROUTING
| -------------------------------------------------------------------------
| This file lets you re-map URI requests to specific controller functions.
|
| Typically there is a one-to-one relationship between a URL string
| and its corresponding controller class/method. The segments in a
| URL normally follow this pattern:
|
| example.com/class/method/id/
|
| In some instances, however, you may want to remap this relationship
| so that a different class/function is called than the one
| corresponding to the URL.
|
| Please see the user guide for complete details:
|
| http://codeigniter.com/user_guide/general/routing.html
|
| -------------------------------------------------------------------------
| RESERVED ROUTES
| -------------------------------------------------------------------------
|
| There area two reserved routes:
|
| _route['default_controller'] = 'welcome';
|
| This route indicates which controller class should be loaded if the
| URI contains no data. In the above example, the "welcome" class
| would be loaded.
|
| _route['404_override'] = 'errors/page_missing';
|
| This route will tell the Router what URI segments to use if those provided
| in the URL cannot be matched to a valid route.
|
*/

_route['default_controller'] = "home";

// Pour la gestion du système anti-hotlink de thetvdb.org
_route['tvdb_com/(:any)'] = "images/index";

// Recherche depuis l'accueil
_route['search/(:any)'] = "home/search";

// Changement des images d'un media
_route['images/change'] = "images/ajax_change_image";

// Ajoût d'une nouvelle image pour un media
_route['images/upload'] = "images/ajax_upload_image";

_route['episodes/(\d+)/(\d+)/(\d+)'] = "episodes/view";

_route['episodes_by_season/(\d+)/(\d+)/page'] = "tvshows/ajax_get_episodes_by_season";
_route['episodes_by_season/(\d+)/(\d+)/page/(\d+)'] = "tvshows/ajax_get_episodes_by_season";
_route['episodes_by_season/(\d+)/(\d+)'] = "tvshows/ajax_get_episodes_by_season";
_route['episodes_written/(\d+)/page'] = "actors/ajax_get_episodes_written";
_route['episodes_written/(\d+)/page/(\d+)'] = "actors/ajax_get_episodes_written";
_route['episodes_written/(\d+)'] = "actors/ajax_get_episodes_written";
_route['episodes_directed/(\d+)/page'] = "actors/ajax_get_episodes_directed";
_route['episodes_directed/(\d+)/page/(\d+)'] = "actors/ajax_get_episodes_directed";
_route['episodes_directed/(\d+)'] = "actors/ajax_get_episodes_directed";

_route['actors/page'] = "actors";
_route['actors/page/(\d+)'] = "actors";
_route['actors/(\d+)'] = "actors/view";
_route['actors/search/(:any)'] = "actors/search";

_route['movies_written/(\d+)/page'] = "actors/ajax_get_movies_written";
_route['movies_written/(\d+)/page/(\d+)'] = "actors/ajax_get_movies_written";
_route['movies_written/(\d+)'] = "actors/ajax_get_movies_written";

_route['movies_directed/(\d+)/page'] = "actors/ajax_get_movies_directed";
_route['movies_directed/(\d+)/page/(\d+)'] = "actors/ajax_get_movies_directed";
_route['movies_directed/(\d+)'] = "actors/ajax_get_movies_directed";

_route['movies_played/(\d+)/page'] = "actors/ajax_get_movies_played";
_route['movies_played/(\d+)/page/(\d+)'] = "actors/ajax_get_movies_played";
_route['movies_played/(\d+)'] = "actors/ajax_get_movies_played";

_route['tvshows_played/(\d+)/page'] = "actors/ajax_get_tvshows_played";
_route['tvshows_played/(\d+)/page/(\d+)'] = "actors/ajax_get_tvshows_played";
_route['tvshows_played/(\d+)'] = "actors/ajax_get_tvshows_played";
_route['tvshows/change_image/(\d+)'] = "tvshows/ajax_change_image";

_route['tvshows/(genre|studio|year)/(\d+)'] = "tvshows/by_criteria";
_route['tvshows/(genre|studio|year)/(\d+)/(\d+)'] = "tvshows/by_criteria";

_route['movies/page'] = "movies";
_route['movies/page/(\d+)'] = "movies";
_route['movies/(\d+)'] = "movies/view";
_route['movies/search/(:any)'] = "movies/search";

_route['movies/change_image/(\d+)'] = "movies/ajax_change_image";
_route['movies/change_data/(\d+)'] = "movies/ajax_change_data";
_route['movies/add_to_set/(\d+)'] = "movies/ajax_add_to_set";
_route['movies/remove_from_set/(\d+)'] = "movies/ajax_remove_from_set";
_route['movies/refresh/(\d+)'] = "movies/ajax_refresh";

_route['movies/(genre|studio|country|year)/(\d+)'] = "movies/by_criteria";
_route['movies/(genre|studio|country|year)/(\d+)/(\d+)'] = "movies/by_criteria";

_route['sets/page'] = "sets";
_route['sets/page/(\d+)'] = "sets";
_route['sets/(\d+)'] = "sets/view";
_route['sets/change_order/(\d+)'] = "sets/ajax_change_order";
_route['sets/add'] = "sets/ajax_add";
_route['sets/delete/(\d+)'] = "sets/delete";
_route['sets/get_list'] = "sets/ajax_get_sets";
_route['sets/delete_poster/(\d+)'] = "sets/ajax_delete_poster";
_route['sets/delete_backdrop/(\d+)'] = "sets/ajax_delete_backdrop";
_route['sets/search/(:any)'] = "sets/search";

_route['tvshows/page'] = "tvshows";
_route['tvshows/page/(\d+)'] = "tvshows";
_route['tvshows/(\d+)'] = "tvshows/view";
_route['tvshows/search/(:any)'] = "tvshows/search";

// Administration
_route['admin'] = "dashboard";
_route['admin/users'] = "users";
_route['admin/sources'] = "sources";

_route['users/page'] = "users/ajax_get_users";
_route['users/page/(\d+)'] = "users/ajax_get_users";
_route['users/add'] = "users/ajax_add";
_route['users/delete'] = "users/ajax_delete";
_route['users/get_list'] = "users/ajax_get_users";
_route['users/login'] = "users/login";
_route['users/edit/(\d+)'] = "users/ajax_edit";
_route['users/save/(\d+)'] = "users/ajax_save";

_route['sources/page'] = "sources/ajax_get_sources";
_route['sources/page/(\d+)'] = "sources/ajax_get_sources";
_route['sources/get_list'] = "sources/ajax_get_sources";
_route['sources/edit/(\d+)'] = "sources/ajax_edit";
_route['sources/save/(\d+)'] = "sources/ajax_save";

_route['files/download/(movie|episode)_(\d+)'] = "files/ajax_download";

/* End of file routes.php */
/* Location: ./application/config/routes.php */
EOF;

		$routes_file = str_replace('_route[', '$route[', $routes_file);

		$filename = APPPATH.'/config/routes.php';

		$handle = fopen($filename, 'w');
		fwrite($handle, $routes_file);
		fclose($handle);
	}

	function make_autoload()
	{
		log_message('debug', "Wizard Step 4 - writing autoload.php");
		$autoload_file = <<< EOF
<?php  if ( ! defined('BASEPATH')) exit('No direct script access allowed');
/*
| -------------------------------------------------------------------
| AUTO-LOADER
| -------------------------------------------------------------------
| This file specifies which systems should be loaded by default.
|
| In order to keep the framework as light-weight as possible only the
| absolute minimal resources are loaded by default. For example,
| the database is not connected to automatically since no assumption
| is made regarding whether you intend to use it.  This file lets
| you globally define which systems you would like loaded with every
| request.
|
| -------------------------------------------------------------------
| Instructions
| -------------------------------------------------------------------
|
| These are the things you can load automatically:
|
| 1. Packages
| 2. Libraries
| 3. Helper files
| 4. Custom config files
| 5. Language files
| 6. Models
|
*/

/*
| -------------------------------------------------------------------
|  Auto-load Packges
| -------------------------------------------------------------------
| Prototype:
|
|  _autoload['packages'] = array(APPPATH.'third_party', '/usr/local/shared');
|
*/

_autoload['packages'] = array(APPPATH.'third_party');

/*
| -------------------------------------------------------------------
|  Auto-load Libraries
| -------------------------------------------------------------------
| These are the classes located in the system/libraries folder
| or in your application/libraries folder.
|
| Prototype:
|
| _autoload['libraries'] = array('database', 'session', 'xmlrpc');
*/

_autoload['libraries'] = array('database', 'user_agent', 'Xbmc_lib', 'VideoInfoScanner', 'session', 'input', 'MY_pagination');

/*
| -------------------------------------------------------------------
|  Auto-load Helper Files
| -------------------------------------------------------------------
| Prototype:
|
| _autoload['helper'] = array('url', 'file');
*/

_autoload['helper'] = array('url', 'html');

/*
| -------------------------------------------------------------------
|  Auto-load Config files
| -------------------------------------------------------------------
| Prototype:
|
| _autoload['config'] = array('config1', 'config2');
|
| NOTE: This item is intended for use ONLY if you have created custom
| config files.  Otherwise, leave it blank.
|
*/

_autoload['config'] = array('xbmc');

/*
| -------------------------------------------------------------------
|  Auto-load Language files
| -------------------------------------------------------------------
| Prototype:
|
| _autoload['language'] = array('lang1', 'lang2');
|
| NOTE: Do not include the "_lang" part of your file.  For example
| "codeigniter_lang.php" would be referenced as array('codeigniter');
|
*/

_autoload['language'] = array('commons', 'media', 'list');

/*
| -------------------------------------------------------------------
|  Auto-load Models
| -------------------------------------------------------------------
| Prototype:
|
| _autoload['model'] = array('model1', 'model2');
|
*/

_autoload['model'] = array();

/* End of file autoload.php */
/* Location: ./application/config/autoload.php */
EOF;

		$autoload_file = str_replace('_autoload[', '$autoload[', $autoload_file);

		$filename = APPPATH.'/config/autoload.php';

		$handle = fopen($filename, 'w');
		fwrite($handle, $autoload_file);
		fclose($handle);
	}

	function make_symbolic($target)
	{
		// On s'assure que la cible se termine bien par DIRECTORY_SEPARATOR
		$link = $target.DIRECTORY_SEPARATOR;
		$link = str_replace(DIRECTORY_SEPARATOR.DIRECTORY_SEPARATOR, DIRECTORY_SEPARATOR, $link);

		// Si l'utilisateur a configuré incorrectement le dossier 'Thumbnails', on le rajoute à la fin
		if (is_dir($link.'Thumbnails/'))
		{
			$link .= 'Thumbnails/';
		}

		// Création du lien symbolique si possible
		if (is_dir($link))
		{
			log_message('debug', "Wizard Step 4 - make symbolic link images target to '$link'");
			exec("cd ".FCPATH.'assets'."; ln -s ".$link." images");
			$this->_make_xbmc($link);
			return TRUE;
		}

		log_message('debug', "Wizard Step 4 - symbolic link incorrect or empty");

		// Erreur sinon
		return FALSE;
	}

	private function _make_xbmc($thumbnails_dir)
	{
		log_message('debug', "Wizard Step 4 - writing xbmc.php");
		$xbmc_file = <<< EOF
<?php  if ( ! defined('BASEPATH')) exit('No direct script access allowed');

/* Dossier des miniatures d'XBMC sur le serveur
 * centralisant les données et surtout les images
 * Terminer par un '/'
 */
_config['thumbnails_dir'] = '$thumbnails_dir';

_config['poster_size'] = array('width' => 185, 'height' => 247);
_config['banner_size'] = array('width' => 300, 'height' => 55);
_config['backdrop_size'] = array('width' => 300, 'height' => 169);
_config['photo_size'] = array('width' => 185, 'height' => 247);
_config['episode_size'] = array('width' => 200, 'height' => 113);

// Liste des contrôleurs suivant si l'utilisateur se trouve sur le site ou dans l'administration
// home (site) et dashboard (admin) sont automatiquement ajoutés
_config['menus'] = array('site' => array('movies', 'sets', 'tvshows', 'actors'),
												 'admin' => array('users', 'sources')
												);

// User agent fictif lors de l'ulisation du script en ligne de commandes
_config['xbmc_fake_user_agent'] = 'Mozilla/5.0 (X11; Linux i686; rv:5.0) Gecko/20100101 Firefox/5.0';

/* End of file xbmc.php */
/* Location: ./application/config/xbmc.php */
EOF;

		$xbmc_file = str_replace('_config[', '$config[', $xbmc_file);

		$filename = APPPATH.'/config/xbmc.php';

		$handle = fopen($filename, 'w');
		fwrite($handle, $xbmc_file);
		fclose($handle);
	}
}

/* End of file wizard.php */
/* Location: ./application/libraries/wizard.php */
